using System;
using System.Collections.Generic;
using VideoOS.Platform;
using VideoOS.Platform.Client;
using VideoOS.Platform.Data;
using VideoOS.Platform.UI;
using System.Threading;

namespace SCAviSequenceExport.Client
{
    /// <summary>
    /// This template code should be replaced with your code.
    /// 
    /// The UserControl to be displayed in a side panel in the Smart Client.<br/>
    /// Generated by a plug-ins SidePanelPlugin.
    /// </summary>
    public partial class SCAviSequenceExportSidePanelUserControl : SidePanelUserControl
    {
        Item _selectedCamera = null;
        bool _shutDown = false;
        AVIExporter _exporter = null;

        public SCAviSequenceExportSidePanelUserControl()
        {
            InitializeComponent();
        }

        public override void Init()
        {
        }

        public override void Close()
        {
            _shutDown = true;
        }

        private void selectCameraButton_Click(object sender, EventArgs e)
        {
            ItemPickerForm form = new ItemPickerForm();
            form.KindFilter = Kind.Camera;
            form.AutoAccept = true;
            form.Init(Configuration.Instance.GetItems(ItemHierarchy.SystemDefined));
            if (form.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                _selectedCamera = form.SelectedItem;
                selectCameraButton.Text = _selectedCamera.Name;
                EnableAddButton();
            }
        }

        private void EnableAddButton()
        {
            addButton.Enabled = _selectedCamera != null && startDateTimePicker.Value < endDateTimePicker.Value;
        }

        private void startDateTimePicker_ValueChanged(object sender, EventArgs e)
        {
            EnableAddButton();
        }

        private void addButton_Click(object sender, EventArgs e)
        {
            exportItemsListBox.Items.Add(
                new ExportItem()
                {
                    Camera = _selectedCamera,
                    StartTime = startDateTimePicker.Value,
                    EndTime = endDateTimePicker.Value,
                    OverlayText = overlayTextBox.Text
                });
            _selectedCamera = null;
            selectCameraButton.Text = "Select camera...";
            overlayTextBox.Text = string.Empty;
            EnableAddButton();
            startExportButton.Enabled = true;
        }

        private class ExportItem : SequenceAviExportElement
        {
            public override string ToString()
            {
                return Camera.Name + "," + StartTime.ToShortTimeString() + "," + EndTime.ToShortTimeString() + "," + OverlayText;
            }
        }

        private void startExportButton_Click(object sender, EventArgs e)
        {
            exportProgressBar.Value = 0;
            errorLabel.Text = string.Empty;
            if (saveFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                _exporter = new AVIExporter();
                _exporter.Path = System.IO.Path.GetDirectoryName(saveFileDialog.FileName);
                _exporter.Filename = System.IO.Path.GetFileName(saveFileDialog.FileName);
                _exporter.Timestamp = timestampCheckBox.Checked;
                List<ExportItem> exportItems = new List<ExportItem>();
                foreach (ExportItem item in exportItemsListBox.Items)
                    exportItems.Add(item);
                _exporter.StartExport(exportItems);
                var thread = new Thread(UpdateProgressThread);
                thread.Start();
                cancelButton.Enabled = true;
                startExportButton.Enabled = false;
            }
        }

        private delegate void UpdateProgressDelegate(int progress);
        private void UpdateProgress(int progress)
        {
            if (InvokeRequired)
            {
                Invoke(new UpdateProgressDelegate(UpdateProgress), progress);
            }
            else
            {
                exportProgressBar.Value = progress;
                if (progress == 100)
                {
                    exportItemsListBox.Items.Clear();
                    cancelButton.Enabled = false;
                }
            }
        }

        private delegate void ShowErrorDelegate(string error);
        private void ShowError(string error)
        {
            if (InvokeRequired)
            {
                Invoke(new ShowErrorDelegate(ShowError), error);
            }
            else
            {
                errorLabel.Text = error;
                cancelButton.Enabled = false;
            }
        }

        private void UpdateProgressThread()
        {
            while (!_shutDown && _exporter.LastError == -1)
            {
                UpdateProgress(_exporter.Progress);
                Thread.Sleep(100);
            }
            if (_shutDown)
            {
                _exporter.Cancel();
                return;
            }
            if (_exporter.LastError == 0)
                UpdateProgress(100);
            else if (_exporter.LastError == 1)
            {
                ShowError("Cancelled");
                return;
            }
            else
                ShowError(_exporter.LastErrorString);            
                
            _exporter.EndExport();
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            _exporter.Cancel();
        }
    }
}
